<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://khurd21.github.io/</id><title>Kyle Hurd</title><subtitle>Kyle Hurd's site to display resume and blog postings.</subtitle> <updated>2023-09-08T04:39:34+00:00</updated> <author> <name>Kyle Hurd</name> <uri>https://khurd21.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://khurd21.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://khurd21.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Kyle Hurd </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Serialization and Separating Declaration and Definition in Header Only Libraries</title><link href="https://khurd21.github.io/posts/cpp-template-project-structure/" rel="alternate" type="text/html" title="Serialization and Separating Declaration and Definition in Header Only Libraries" /><published>2023-09-06T00:00:00+00:00</published> <updated>2023-09-06T17:00:00+00:00</updated> <id>https://khurd21.github.io/posts/cpp-template-project-structure/</id> <content src="https://khurd21.github.io/posts/cpp-template-project-structure/" /> <author> <name>Kyle Hurd</name> </author> <category term="programming" /> <summary> In my personal projects, and at work, I have been venturing very heavily into templated libraries. Sometimes the project was completely header-only, other times it was a hybrid. In my most recent endeavor, I was challenged with creating a templated library that was “closed” off from additional implementations. These challenges pressured me into understanding the purpose of certain design patter... </summary> </entry> <entry><title>Threading in C++</title><link href="https://khurd21.github.io/posts/cpp-threads/" rel="alternate" type="text/html" title="Threading in C++" /><published>2023-05-24T00:00:00+00:00</published> <updated>2023-05-24T17:00:00+00:00</updated> <id>https://khurd21.github.io/posts/cpp-threads/</id> <content src="https://khurd21.github.io/posts/cpp-threads/" /> <author> <name>Kyle Hurd</name> </author> <category term="programming" /> <summary> This post stems from my recent exposure to handling asynchronous functions in other programming languages. One of my recent projects I have dove into is an Alexa Skill called SkyBro. In this project, I used dependencies such as DynamoDB and other APIs that ate up precious time to delivering a meaningful message back to a user. In order to speed up the Alexa Skill, writing asynchronous code to g... </summary> </entry> <entry><title>Parallel Implementation of Prefix Sum</title><link href="https://khurd21.github.io/posts/cpp-parallel-prefix-sum/" rel="alternate" type="text/html" title="Parallel Implementation of Prefix Sum" /><published>2023-03-02T00:00:00+00:00</published> <updated>2023-03-02T17:00:00+00:00</updated> <id>https://khurd21.github.io/posts/cpp-parallel-prefix-sum/</id> <content src="https://khurd21.github.io/posts/cpp-parallel-prefix-sum/" /> <author> <name>Kyle Hurd</name> </author> <category term="programming" /> <summary> For a while, I have been invested in learning how to parallelize certain algorithms. Parallelizing algorithms and code in general can be tricky. I have discovered that it is quite tricky. It is surprisingly easy to create race conditions, and race conditions could go unnoticed for a long time or deliver unreliable outputs. Prefix Sum - Serial I was grinding LeetCode questions and Project Eule... </summary> </entry> <entry><title>Adding Boost and OpenMP Library to CMake Project</title><link href="https://khurd21.github.io/posts/cpp-cmake-openmp/" rel="alternate" type="text/html" title="Adding Boost and OpenMP Library to CMake Project" /><published>2023-02-09T00:00:00+00:00</published> <updated>2023-02-09T17:00:00+00:00</updated> <id>https://khurd21.github.io/posts/cpp-cmake-openmp/</id> <content src="https://khurd21.github.io/posts/cpp-cmake-openmp/" /> <author> <name>Kyle Hurd</name> </author> <category term="programming" /> <summary> Starting around mid-2021, I discovered a website called Project Euler. Project Euler “is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve.” The questions tend to take me 30 minutes to several hours to come up with a reasonable solution to get the answer. The website encourages that users implement solutions that r... </summary> </entry> <entry><title>Exploring For Loops in Cpp</title><link href="https://khurd21.github.io/posts/cpp-exploring-for-loops/" rel="alternate" type="text/html" title="Exploring For Loops in Cpp" /><published>2023-01-18T00:00:00+00:00</published> <updated>2023-01-18T17:00:00+00:00</updated> <id>https://khurd21.github.io/posts/cpp-exploring-for-loops/</id> <content src="https://khurd21.github.io/posts/cpp-exploring-for-loops/" /> <author> <name>Kyle Hurd</name> </author> <category term="programming" /> <summary> This week I was diving into some of the new features C++ has regarding iteration. This newfound interest stemmed from wanting to make cleaner, more understandable code. There have been many situations when doing LeetCode problems or personal projects where I felt like I could clean up or use more modern tools in certain situations. In this post, I will explore some new ways for iterating for lo... </summary> </entry> </feed>
